"""This module defines sound objects created either by a bat or by other sounds as an echo"""

import math

from supporting_files.utilities import call_directionality_factor

# TODO: EchoSound is inherited from DirectSound
# need info on what it echoes off of


class EchoSound:
    def __init__(
        self,
        parameters_df,
        origin,
        creation_time,
        emitter_id,
        initial_spl,
        parent_creation_time,
        reflection_count,
        reflected_from,
        # direction_vector,
    ):
        self.parameters_df = parameters_df
        self.origin = origin
        self.creation_time = creation_time
        self.emitter_id = emitter_id
        self.initial_spl = initial_spl
        self.current_spl = initial_spl

        self.parent_creation_time = (
            parent_creation_time  # ID of sound that created this echo
        )
        self.reflection_count = reflection_count
        self.current_radius = 0.0
        self.max_radius = (
            self.parameters_df["SOUND_SPEED"][0]
            * self.parameters_df["CALL_DURATION"][0]
        )
        self.speed = self.parameters_df["SOUND_SPEED"][0]
        # Keep track of when to kill sound; either when db is below 20 or when out of arena
        self.active = True
        self.has_reflected = False  # Keep track of if it has reflected in the past
        self.reflected_obstacles = (
            set()
        )  # Keep track on number of echoes generated by self
        self.reflected_from = reflected_from

        # self.direction_vector = direction_vector

    def update(self, current_time):
        """Function to propagate sound with time.
        This function updates the radius of the sound disk with time.
        Also, ensures sounds outside the arena are "disabled" and no longer tracked.

        Args:
            current_time (float): Time, in seconds, for which the simualtion has been running.
        """
        elapsed = current_time - self.creation_time
        self.current_radius = self.speed * elapsed

        # Calculate spl with distance and air absorption

        if self.current_radius > 0:
            distance_effect = 20 * math.log10(self.current_radius / 1)
            self.current_spl = (
                self.initial_spl
                - distance_effect
                - (self.parameters_df["AIR_ABSORPTION"][0] * self.current_radius)
            )

        # if current_time >= self.creation_time + Constants.CALL_DURATION:
        #     self.active = False
        if self.check_if_sound_outside_arena():
            self.active = False

    def contains_point(self, point):
        """Checks whether a given point is within the sound disk.
        This function helps to decide when to generate echoes from objects.

        Args:
            point (Vector): _description_

        Returns:
            _type_: _description_
        """
        distance = self.origin.distance_to(point)
        return distance <= self.current_radius and distance >= max(
            0, self.current_radius - self.parameters_df["SOUND_DISK_WIDTH"][0]
        )

    # def create_echo(self, point, current_time, normal, reflected_from):
    #     """Handles EchoSound creation by the sound object.
    #     Creates an echo at the specified point.

    #     Args:
    #         point (Vector): point of reflection of sound
    #         current_time (float): time, in seconds, for which the simualtion has been running.
    #         normal (Vector): Normal vector from the object that the sound reflects from.
    #         reflected_from (string): The id of the object the sound reflects from.

    #     Returns:
    #         EchoSound: The generated EchoSound object.
    #     """

    #     if self.has_reflected:  # or
    #         # self.reflection_count >= self.parameters_df['MAX_REFLECTIONS'][0]):
    #         return None

    #     reflected_spl = self.current_spl - self.parameters_df["REFLECTION_LOSS"][0]
    #     if reflected_spl < self.parameters_df["MIN_DETECTABLE_SPL"][0]:
    #         return None

    #     self.has_reflected = True
    #     echo = EchoSound(
    #         parameters_df=self.parameters_df,
    #         origin=point,
    #         creation_time=current_time,
    #         emitter_id=self.emitter_id,
    #         initial_spl=reflected_spl,
    #         parent_creation_time=id(self),
    #         reflection_count=self.reflection_count + 1,
    #         reflected_from=reflected_from,
    #     )
    #     echo.reflected_obstacles.update(self.reflected_obstacles)
    #     return echo

    def __repr__(self):
        return (
            f"EchoSound(origin={self.origin}, radius={self.current_radius:.2f}, "
            f"spl={self.current_spl:.1f}dB, reflections={self.reflection_count}, "
            f"emitter={self.emitter_id}, parent={self.parent_creation_time}), creation_time={self.creation_time}"
        )

    def check_if_sound_outside_arena(self):
        """Checks if sound is outside the bounds of the arena.
        Sound obejct is no longer tracked if its outside the arena.

        Returns:
            Bool: True if sound is outside the bounds of the arena, else False.
        """
        if (self.current_radius) > max(
            self.parameters_df["ARENA_HEIGHT"][0], self.parameters_df["ARENA_WIDTH"][0]
        ):

            return True
        else:
            return False


class DirectSound(EchoSound):
    def __init__(
        self,
        parameters_df,
        origin,
        creation_time,
        emitter_id,
        # direction_vector
    ):
        # self.parameters_df= parameters_df
        super().__init__(
            parameters_df=parameters_df,
            origin=origin,
            creation_time=creation_time,
            emitter_id=emitter_id,
            initial_spl=parameters_df["EMITTED_SPL"][0],
            parent_creation_time=parameters_df["EMITTED_SPL"][0],
            reflection_count=0,
            reflected_from=None,
            # direction_vector=direction_vector,
        )

        self.current_spl = self.initial_spl
        self.current_radius = 0
        # Keep track of sound disc width
        self.max_radius = self.parameters_df["SOUND_DISK_WIDTH"][0]

        self.active = True
        # Direct sounds can only reflect once/ i.e. per collision only one echo ngl
        self.has_reflected = False
        self.reflected_obstacles = (
            set()
        )  # Track obstacles that it reflected off of in order to cap this in the future

    def create_echo(self, point, current_time, normal, reflected_from):
        """Handles EchoSound creation by the sound object.
        Creates an echo at the specified point.

        Args:
            point (Vector): point of reflection of sound
            current_time (float): time, in seconds, for which the simualtion has been running.
            normal (Vector): Normal vector from the object that the sound reflects from.
            reflected_from (string): The id of the object the sound reflects from.

        Returns:
            EchoSound: The generated EchoSound object.
        """
        if self.has_reflected:
            return None

        # angle_between_sound_and_reflection_point = self.direction_vector.angle_between(
        #     point
        # )
        # call_directionality = call_directionality_factor(
        #     A=7, theta=angle_between_sound_and_reflection_point
        # )

        object_type = reflected_from[0:4]
        if object_type == "wall":
            reflection_loss = 0
        else:
            reflection_loss = self.parameters_df["REFLECTION_LOSS"][0]

        reflected_spl = (
            self.current_spl
            - reflection_loss
            # + call_directionality
        )
        if reflected_spl < self.parameters_df["MIN_DETECTABLE_SPL"][0]:
            return None

        # self.has_reflected = True
        echo = EchoSound(
            parameters_df=self.parameters_df,
            origin=point,
            creation_time=current_time,
            emitter_id=self.emitter_id,
            initial_spl=reflected_spl,
            parent_creation_time=self.creation_time,
            reflection_count=1,
            reflected_from=reflected_from,
            # direction_vector=normal,
        )
        echo.reflected_obstacles.update(self.reflected_obstacles)
        return echo

    def __repr__(self):
        return (
            f"DirectSound(origin={self.origin}, radius={self.current_radius:.2f}, "
            f"spl={self.current_spl:.1f}dB, emitter={self.emitter_id}), creation_time={self.creation_time}"
        )
