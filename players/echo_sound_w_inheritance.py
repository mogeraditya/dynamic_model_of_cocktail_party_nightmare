from supporting_files.vectors import Vector
import supporting_files.constants as Constants
import math
from players.direct_sound import DirectSound

# TODO: EchoSound is inherited from DirectSound

class EchoSound(DirectSound):
    def __init__(self, origin, creation_time, emitter_id, initial_spl, parent_creation_time, reflection_count):
        super().__init__(origin, creation_time, emitter_id)

        self.initial_spl = initial_spl
        self.current_spl = initial_spl
        self.parent_creation_time = parent_creation_time  # ID of sound that created this echo
        self.reflection_count = reflection_count
        self.current_radius = 0
        self.max_radius = Constants.SOUND_SPEED * Constants.CALL_DURATION
        self.active = True # Keep track of when to kill sound; either when db is below 20 or when out of arena
        self.has_reflected = False  # Keep track of if it has reflected in the past
        self.reflected_obstacles = set() # Keep track on number of echoes generated by self
    
    def __repr__(self):
        return (f"EchoSound(origin={self.origin}, radius={self.current_radius:.2f}, "
                f"spl={self.current_spl:.1f}dB, reflections={self.reflection_count}, "
                f"emitter={self.emitter_id}, parent_time={self.parent_creation_time})")
    
