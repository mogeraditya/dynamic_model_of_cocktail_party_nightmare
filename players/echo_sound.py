from supporting_files.vectors import Vector
from supporting_files.constants import Constants
import math

class EchoSound:
    def __init__(self, origin, creation_time, emitter_id, initial_spl, parent_id, reflection_count):
        self.origin = origin
        self.creation_time = creation_time
        self.emitter_id = emitter_id
        self.initial_spl = initial_spl
        self.current_spl = initial_spl
        self.parent_id = parent_id  # ID of sound that created this echo
        self.reflection_count = reflection_count
        self.current_radius = 0
        self.max_radius = Constants.SOUND_SPEED * Constants.CALL_DURATION
        self.active = True # Keep track of when to kill sound; either when db is below 20 or when out of arena
        self.has_reflected = False  # Keep track of if it has reflected in the past
        self.reflected_obstacles = set() # Keep track on number of echoes generated by self
        
    def update(self, current_time):
        elapsed = current_time - self.creation_time
        self.current_radius = Constants.SOUND_SPEED * elapsed
        
        # Calculate spl with distance and air absorption
        if self.current_radius > 0:
            distance_effect = 20 * math.log10(self.current_radius)
            self.current_spl = (self.initial_spl - distance_effect - 
                              (Constants.AIR_ABSORPTION * self.current_radius))
        
        # if current_time >= self.creation_time + Constants.CALL_DURATION:
        #     self.active = False
    
    def contains_point(self, point):
        """Check if point is within the sound disk"""
        distance = self.origin.distance_to(point)
        return distance <= self.current_radius and distance >= max(0, self.current_radius - Constants.SOUND_RADIUS)
    
    def create_echo(self, point, current_time, normal):
        if (self.has_reflected or 
            self.reflection_count >= Constants.MAX_REFLECTIONS):
            return None
            
        reflected_spl = self.current_spl - Constants.REFLECTION_LOSS
        if reflected_spl < Constants.MIN_DETECTABLE_SPL:
            return None
        
        self.has_reflected = True
        echo = EchoSound(
            origin=point,
            creation_time=current_time,
            emitter_id=self.emitter_id,
            initial_spl=reflected_spl,
            parent_id=id(self),
            reflection_count=self.reflection_count + 1
        )
        echo.reflected_obstacles.update(self.reflected_obstacles)
        return echo
    
    def __repr__(self):
        return (f"EchoSound(origin={self.origin}, radius={self.current_radius:.2f}, "
                f"spl={self.current_spl:.1f}dB, reflections={self.reflection_count}, "
                f"emitter={self.emitter_id}, parent={self.parent_id})")